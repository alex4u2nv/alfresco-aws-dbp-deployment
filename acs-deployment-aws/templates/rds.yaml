# Alfresco Enterprise ACS Deployment AWS
# Copyright (C) 2005 - 2018 Alfresco Software Limited
# License rights for this program may be obtained from Alfresco Software, Ltd.
# pursuant to a written agreement and any use of this program without such an
# agreement is prohibited.

AWSTemplateFormatVersion: "2010-09-09"
Description: "RDS stack that deploys RDS with Aurora as engine"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: RDS Stack Configuration
        Parameters:
          - VPCID
          - NodeSecurityGroup
          - PrivateSubnet1
          - PrivateSubnet2
      - Label:
          default: Alfresco Storage Configuration
        Parameters:
          - RDSInstanceType
          - RDSAllocatedStorage
          - RDSDBName
          - RDSUsername
          - RDSPassword
          - RDSCreateSnapshotWhenDeleted

    ParameterLabels:
      NodeSecurityGroup:
        default: The Node Security Group ID to use for RDS
      PrivateSubnet1:
        default: The ID of Private Subnet 1
      PrivateSubnet2:
        default: The ID of Private Subnet 2
      RDSDBName:
        default: RDS DB Name
      RDSInstanceType:
        default: RDS Instance Type
      RDSAllocatedStorage:
        default: RDS Allocated Storage
      RDSPassword:
        default: RDS Password
      RDSUsername:
        default: RDS User Name
      RDSCreateSnapshotWhenDeleted:
        default: Creates a snapshot when the stack gets deleted
      VPCID:
        default: VPC ID

Parameters:
  NodeSecurityGroup:
    Description: ID for the VPC, This will be used to get the node security group
    Type: AWS::EC2::SecurityGroup::Id
  PrivateSubnet1:
    Description: ID of Private Subnet 1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: ID of Private Subnet 2
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: ID for the VPC
    Type: AWS::EC2::VPC::Id
  RDSDBName:
    Default: alfresco
    Description: DB name for the Amazon RDS Aurora database (MySQL if non-Amazon Aurora region).
    Type: String
  RDSInstanceType:
    AllowedValues:
      - "db.r3.large"
      - "db.r3.xlarge"
      - "db.r3.2xlarge"
      - "db.r3.4xlarge"
      - "db.r3.8xlarge"
      - "db.r4.large"
      - "db.r4.2xlarge"
      - "db.r4.8xlarge"
      - "db.r4.xlarge"
      - "db.r4.16xlarge"
    ConstraintDescription: Must contain valid RDS instance type
    Default: db.r4.xlarge
    Description: EC2 instance type for the Amazon RDS instances
    Type: String
  RDSPassword:
    Description: Password for the Amazon RDS database
    NoEcho: True
    Type: String
  RDSUsername:
    Default: alfresco
    Description: User name for the Amazon RDS database
    Type: String
  RDSAllocatedStorage:
    Default: 5
    Description: Size in GiB for the Amazon RDS MySQL database allocated storage (only non-Amazon Aurora region)
    Type: String
  RDSCreateSnapshotWhenDeleted:
    Description: Creates a snapshot when the stack gets deleted
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  isAmazonAuroraRegion: !Not [Condition: isNotAmazonAuroraRegion]
  isNotAmazonAuroraRegion: !Equals [!Ref "AWS::Region", "sa-east-1"]
  isAuroraAndCreateSnasphot: !And [Condition: isAmazonAuroraRegion, Condition: CreateSnapshot]
  isAuroraAndNotCreateSnasphot: !And [Condition: isAmazonAuroraRegion, !Not [Condition: CreateSnapshot]]
  CreateSnapshot: !Equals [!Ref RDSCreateSnapshotWhenDeleted, "true"]

Resources:
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS DB Instance.
      VpcId: !Ref VPCID

  RDSSecurityGroupFromNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker nodes to connect to RDS
      GroupId: !Ref RDSSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Condition: isNotAmazonAuroraRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"
      MultiAZ: true
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      Engine: MySQL
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      DBName: !Ref RDSDBName
      AllocatedStorage: !Ref RDSAllocatedStorage
      PubliclyAccessible: false
      DBInstanceClass: !Ref RDSInstanceType
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
    DeletionPolicy: Snapshot

  RDSDBClusterWithSnapshot:
    Type: AWS::RDS::DBCluster
    Condition: isAuroraAndCreateSnasphot
    DeletionPolicy: Snapshot
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}"
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      Engine: aurora
      DatabaseName: !Ref RDSDBName
      VpcSecurityGroupIds:
      - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

  RDSDBClusterNoSnapshot:
    Type: AWS::RDS::DBCluster
    Condition: isAuroraAndNotCreateSnasphot
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      Engine: aurora
      DatabaseName: !Ref RDSDBName
      VpcSecurityGroupIds:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    Condition: isAmazonAuroraRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance-1"
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      Engine: aurora
      DBClusterIdentifier: !If [isAuroraAndCreateSnasphot, !Ref RDSDBClusterWithSnapshot, !Ref RDSDBClusterNoSnapshot]
      PubliclyAccessible: false
      DBInstanceClass: !Ref RDSInstanceType
    DeletionPolicy: Delete

  RDSDBInstance2:
    Type: AWS::RDS::DBInstance
    Condition: isAmazonAuroraRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance-2"
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      Engine: aurora
      DBClusterIdentifier: !If [isAuroraAndCreateSnasphot, !Ref RDSDBClusterWithSnapshot, !Ref RDSDBClusterNoSnapshot]
      PubliclyAccessible: false
      DBInstanceClass: !Ref RDSInstanceType
    DeletionPolicy: Delete

Outputs:
  SubstackName:
    Value: !Sub "${AWS::StackName}"
  Endpoint:
    Value: !If [isAuroraAndCreateSnasphot, !GetAtt RDSDBClusterWithSnapshot.Endpoint.Address, !If [isAuroraAndNotCreateSnasphot, !GetAtt RDSDBClusterNoSnapshot.Endpoint.Address, !GetAtt RDSDBInstance.Endpoint.Address]]