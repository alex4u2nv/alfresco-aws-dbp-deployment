# Alfresco Enterprise ACS Deployment AWS
# Copyright (C) 2005 - 2018 Alfresco Software Limited
# License rights for this program may be obtained from Alfresco Software, Ltd.
# pursuant to a written agreement and any use of this program without such an
# agreement is prohibited.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Alfresco Content Services Deployment Stack."

Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: ACS Stack Configuration
          Parameters:
            - TemplateBucketName
            - TemplateBucketKeyPrefix
            - EKSName
            - EFSName
            - S3BucketName
            - S3BucketKMSAlias
            - BastionAutoScalingGroup
            - VPCID
            - NodeSecurityGroup
            - K8sNamespace
            - ElbCertArn
            - ElbCertPolicy
            - AcsExternalName
            - NginxIngressVersion
            - IngressReleaseName
            - AcsReleaseName
            - AlfrescoPassword
            - RDSEndpoint
            - DatabasePassword
            - MQEndpoint
            - MQUsername
            - MQPassword
            - RegistryCredentials
            - RepoImage
            - RepoTag
            - RepoPods
            - ShareImage
            - ShareTag
            - Route53DnsZone

      ParameterLabels:
        TemplateBucketName:
          default: The name of the S3 bucket that holds the templates
        TemplateBucketKeyPrefix:
          default: The Key prefix for the templates in the S3 template bucket
        EKSName:
          default: The EKS name
        EFSName:
          default: The EFS name
        S3BucketName:
          default: The bucket used for S3 connector
        S3BucketKMSAlias:
          default: The S3 bucket KMS alias used for S3 connector
        BastionAutoScalingGroup:
          default: BastionAutoScalingGroup Id
        VPCID:
          default: The ID of the VPC to deploy the Bastion and EKS Cluster into
        NodeSecurityGroup:
          default: The Security Group of EKS Worker nodes
        K8sNamespace:
          default: The namespace in EKS to deploy Helm charts
        ElbCertArn:
          default: The ACS SSL Certificate arn to use with ELB
        ElbCertPolicy:
          default: The ACS SSL Certificate policy to use with ELB
        AcsExternalName:
          default: The ACS external endpoint name
        NginxIngressVersion:
          default: The nginx-ingress chart version
        AlfrescoPassword:
          default: The Admin password for Alfresco
        RDSEndpoint:
          default: RDS Endpoint for Aurora MySql connection
        DatabasePassword:
          default: The Database password for Alfresco
        MQEndpoint:
          default: MQ Endpoint for AmazonMQ connection
        MQUsername:
          default: AmazonMQ User Name
        MQPassword:
          default: AmazonMQ Password
        RegistryCredentials:
          default: Private Registry Credentials. Base64 encryption of dockerconfig json.
        IngressReleaseName:
          default: The helm chart release name of nginx-ingress
        AcsReleaseName:
          default: The helm chart release name of alfresco content services
        RepoImage:
          default: The Alfresco Repository docker image name
        RepoTag:
          default: The Alfresco Repository docker tag name
        RepoPods:
          default: The number of repository pods in the cluster
        ShareImage:
          default: The Alfresco Share docker image name
        ShareTag:
          default: The Alfresco Share docker tag name
        Route53DnsZone:
          default: The hosted zone to create Route53 Record for ACS (including the . (dot) at the end)

Parameters:
    TemplateBucketName:
      AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
      ConstraintDescription: "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
      Description: "S3 bucket name that contains the CFN templates (VPC, Bastion etc). This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
      Type: "String"
    TemplateBucketKeyPrefix:
      AllowedPattern: "^[0-9a-zA-Z-/]*$"
      ConstraintDescription: "Template bucket key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
      Type: "String"
    EKSName:
      Type: String
      Description: The EKS name
    EFSName:
      Type: String
      Description: The EFS name
    S3BucketName:
      Type: String
      Description: The bucket used for S3 connector
    S3BucketKMSAlias:
      Type: String
      Description: The S3 bucket KMS alias used for S3 connector
    BastionAutoScalingGroup:
      Type: String
      Description: BastionAutoScalingGroup Id
    VPCID:
      Description: "ID for the VPC"
      Type: "AWS::EC2::VPC::Id"
    NodeSecurityGroup:
      Type: String
      Description: The Security Group of EKS Worker nodes
    K8sNamespace:
      Type: String
      Description: The namespace in EKS to deploy Helm charts
    ElbCertArn:
      Type: String
      Description: The ACS SSL Certificate arn to use with ELB
    ElbCertPolicy:
      Type: String
      Description: The ACS SSL Certificate policy to use with ELB
    AcsExternalName:
      Type: String
      Description: The ACS external endpoint name
    NginxIngressVersion:
      Type: String
      Description: The nginx-ingress chart version
    AlfrescoPassword:
      Type: String
      Description: The Admin password for Alfresco
      NoEcho: True
    RDSEndpoint:
      Type: String
      Description: RDS Endpoint for Aurora MySql connection
    DatabasePassword:
      Type: String
      Description: The Database password for Alfresco
      NoEcho: True
    MQEndpoint:
      Type: String
      Description: MQ Endpoint for AmazonMQ connection
    MQUsername:
      AllowedPattern: ".+"
      Default: admin
      Description: User name for the AmazonMQ
      Type: String
    MQPassword:
      AllowedPattern: ".{12,}"
      ConstraintDescription: AmazonMQ user password requires minimum 12 characters.
      Description: Password for the AmazonMQ. Minimum 12 characters.
      NoEcho: True
      Type: String
    RegistryCredentials:
      Type: String
      Description: The private registry credentials in base64 format.
      NoEcho: True
      Default: ""
    IngressReleaseName:
      Type: String
      Description: The helm chart release name of nginx-ingress
    AcsReleaseName:
      Type: String
      Description: The helm chart release name of alfresco content services
    RepoImage:
      Type: String
      Description: The Alfresco Repository docker image name
    RepoTag:
      Type: String
      Description: The Alfresco Repository docker tag name
    RepoPods:
      Type: String
      Description: The number of repository pods in the cluster
    ShareImage:
      Type: String
      Description: The Alfresco Share docker image name
    ShareTag:
      Type: String
      Description: The Alfresco Share docker tag name
    Route53DnsZone:
      Type: String
      Description: The hosted zone to create Route53 Record for ACS (including the . (dot) at the end)

Conditions:
  PrivateRegistry: !Not [!Equals [!Ref RegistryCredentials, ""]]
  NewRepoImage: !Not [!Equals [!Ref RepoImage, ""]]
  NewRepoTag: !Not [!Equals [!Ref RepoTag, ""]]
  NewShareImage: !Not [!Equals [!Ref ShareImage, ""]]
  NewShareTag: !Not [!Equals [!Ref ShareTag, ""]]

Resources:

  # SSM documents to run helm commands on the bastion

  # Download scripts directory
  HelmDownloadScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Download directory of helm helper scripts
        mainSteps:
          - action: aws:downloadContent
            name: downloadHelmScriptsDirectory
            inputs:
              sourceType: "S3"
              sourceInfo: !Sub "{ \"path\": \"https://${TemplateBucketName}.s3.amazonaws.com/${TemplateBucketKeyPrefix}/scripts\" }"
              destinationPath: "/tmp"
      DocumentType: Command

  # Execute Helm nginx-ingress installation
  HelmInstallIngressRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Installs nginx-ingress helm chart
        mainSteps:
          - action: aws:runShellScript
            name: helmInstallIngress
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/helmIngress.sh"
                - !Sub "/tmp/helmIngress.sh\
                  \ --ingress-release ${IngressReleaseName}\
                  \ --ingress-version ${NginxIngressVersion}\
                  \ --namespace ${K8sNamespace}\
                  \ --aws-cert-arn ${ElbCertArn}\
                  \ --aws-cert-policy ${ElbCertPolicy}\
                  \ --external-name ${AcsExternalName}"
              timeoutSeconds: 60
      DocumentType: Command

  # Execute Helm ACS installation
  HelmInstallRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Install Alfresco Content Services Helm chart
        mainSteps:
          - action: aws:runShellScript
            name: helmAcsInstall
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/helmAcs.sh"
                - Fn::Join:
                  - " "
                  - - "/tmp/helmAcs.sh"
                    - !Sub "--acs-release ${AcsReleaseName}"
                    - !Sub "--efs-name ${EFSName}"
                    - !Sub "--namespace ${K8sNamespace}"
                    - !Sub "--alfresco-password ${AlfrescoPassword}"
                    - !Sub "--rds-endpoint ${RDSEndpoint}"
                    - !Sub "--database-password ${DatabasePassword}"
                    - !Sub "--mq-endpoint ${MQEndpoint}"
                    - !Sub "--mq-username ${MQUsername}"
                    - !Sub "--mq-password ${MQPassword}"
                    - !Sub "--external-name ${AcsExternalName}"
                    - !If [NewRepoImage, !Join ["", [--repo-image, " ", !Ref RepoImage]], !Ref "AWS::NoValue"]
                    - !If [NewRepoTag, !Join ["", [--repo-tag, " ", !Ref RepoTag]], !Ref "AWS::NoValue"]
                    - !If [NewShareImage, !Join ["", [--share-image, " ", !Ref ShareImage]], !Ref "AWS::NoValue"]
                    - !If [NewShareTag, !Join ["", [--share-tag, " ", !Ref ShareTag]], !Ref "AWS::NoValue"]
                    - !Sub "--repo-pods ${RepoPods}"
                    - !Sub "--s3bucket-name ${S3BucketName}"
                    - !Sub "--s3bucket-kms-alias ${S3BucketKMSAlias}"
                    - !Sub "--s3bucket-location ${AWS::Region}"
                    - !If [PrivateRegistry, !Join ["", [--registry-secret, " ", !Ref RegistryCredentials]], !Ref "AWS::NoValue"]
                    - "--install"
              timeoutSeconds: 90
      DocumentType: Command

  # Execute Helm ACS upgrade
  HelmUpgradeRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Upgrade existing Alfresco Content Services Helm chart
        mainSteps:
          - action: aws:runShellScript
            name: helmAcsUpgrade
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/helmAcs.sh"
                - Fn::Join:
                  - " "
                  - - "/tmp/helmAcs.sh"
                    - !Sub "--acs-release ${AcsReleaseName}"
                    - !Sub "--efs-name ${EFSName}"
                    - !Sub "--namespace ${K8sNamespace}"
                    - !Sub "--alfresco-password ${AlfrescoPassword}"
                    - !Sub "--rds-endpoint ${RDSEndpoint}"
                    - !Sub "--database-password ${DatabasePassword}"
                    - !Sub "--mq-endpoint ${MQEndpoint}"
                    - !Sub "--mq-username ${MQUsername}"
                    - !Sub "--mq-password ${MQPassword}"
                    - !Sub "--external-name ${AcsExternalName}"
                    - !If [NewRepoImage, !Join ["", [--repo-image, " ", !Ref RepoImage]], !Ref "AWS::NoValue"]
                    - !If [NewRepoTag, !Join ["", [--repo-tag, " ", !Ref RepoTag]], !Ref "AWS::NoValue"]
                    - !If [NewShareImage, !Join ["", [--share-image, " ", !Ref ShareImage]], !Ref "AWS::NoValue"]
                    - !If [NewShareTag, !Join ["", [--share-tag, " ", !Ref ShareTag]], !Ref "AWS::NoValue"]
                    - !Sub "--repo-pods ${RepoPods}"
                    - !Sub "--s3bucket-name ${S3BucketName}"
                    - !Sub "--s3bucket-kms-alias ${S3BucketKMSAlias}"
                    - !Sub "--s3bucket-location ${AWS::Region}"
                    - "--upgrade"
              timeoutSeconds: 60
      DocumentType: Command

  # Get ACS ELB Address
  GetElbEndpointRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Get ELB Address of ACS Ingress
        mainSteps:
          - action: aws:runShellScript
            name: getElbEndpoint
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/getElb.sh"
                - !Sub "/tmp/getElb.sh --ingress-release ${IngressReleaseName} --namespace ${K8sNamespace}"
              timeoutSeconds: 60
      DocumentType: Command

  # Execute Helm nginx-ingress deletion
  HelmDeleteAcsRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Delete ACS Helm Chart
        mainSteps:
          - action: aws:runShellScript
            name: helmDeleteAcs
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/deleteAcs.sh"
                - !Sub "/tmp/deleteAcs.sh --acs-release ${AcsReleaseName}"
              timeoutSeconds: 60
      DocumentType: Command

  # Execute Helm nginx-ingress deletion
  HelmDeleteIngressRunScript:
    Type: "AWS::SSM::Document"
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Delete Nginx Ingress Helm Chart
        mainSteps:
          - action: aws:runShellScript
            name: helmDeleteIngress
            inputs:
              workingDirectory: "/root"
              runCommand:
                - "chmod u+x /tmp/deleteIngress.sh"
                - !Sub "/tmp/deleteIngress.sh --ingress-release ${IngressReleaseName}"
              timeoutSeconds: 60
      DocumentType: Command

  HelmHelperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: HelmHelperLambdaRoleLoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: HelmHelperLambdaRoleEc2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeNetworkInterfaceAttribute
                Resource: '*'
        - PolicyName: HelmHelperLambdaRoleSsmPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeDocument
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: '*'
        - PolicyName: HelmHelperLambdaRoleCfnPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
        - PolicyName: s3GetObjectPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${TemplateBucketName}"
                  - !Sub "arn:aws:s3:::${TemplateBucketName}/${TemplateBucketKeyPrefix}/lambdas/helm-helper-lambda.zip"

  HelmHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref TemplateBucketName
        S3Key: !Sub "${TemplateBucketKeyPrefix}/lambdas/helm-helper-lambda.zip"
      Handler: helmHelperLambda.handler
      Role: !GetAtt HelmHelperLambdaRole.Arn
      Runtime: python2.7
      Timeout: 420
      Description: "A custom resource to manage Helm charts used for deploying ACS"

  HelmHelperLambdaCustomResource:
    Type: Custom::HelmHelper
    Properties:
      ServiceToken: !GetAtt HelmHelperLambda.Arn
      EKSName: !Ref EKSName
      VPCID: !Ref VPCID
      NodeSecurityGroup: !Ref NodeSecurityGroup
      BastionAutoScalingGroup: !Ref BastionAutoScalingGroup
      HelmDownloadScript: !Ref HelmDownloadScript
      HelmInstallIngressRunScript: !Ref HelmInstallIngressRunScript
      HelmInstallRunScript: !Ref HelmInstallRunScript
      HelmUpgradeRunScript: !Ref HelmUpgradeRunScript
      GetElbEndpointRunScript: !Ref GetElbEndpointRunScript
      HelmDeleteAcsRunScript: !Ref HelmDeleteAcsRunScript
      HelmDeleteIngressRunScript: !Ref HelmDeleteIngressRunScript
      StackName: !Sub "${AWS::StackName}"

  Route53DnsRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: ACS DNS Record for ELB
      HostedZoneName: !Ref Route53DnsZone
      RecordSets:
        - Name: !Ref AcsExternalName
          Type: CNAME
          TTL: '300'
          ResourceRecords:
            - !GetAtt HelmHelperLambdaCustomResource.elb

Outputs:
  SubstackName:
    Description: The ACS stack name
    Value: !Sub "${AWS::StackName}"
  AcsElbEndpoint:
    Description: Alfresco Content Services Elb Address
    Value: !GetAtt HelmHelperLambdaCustomResource.elb
  AcsDnsEndpoint:
    Description: Alfresco Content Services Elb Address
    Value: !Join ["", ["https://", !Ref AcsExternalName, "/share"] ]
